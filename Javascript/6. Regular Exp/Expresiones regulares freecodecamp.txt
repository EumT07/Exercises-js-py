Forma de hacer una expresion usando test Method

let myString = "Hello, World!";
let myRegex = /Hello/;
let result = myRegex.test(myString); // Change this line


console.log(result)// true

----------------------------------------------------------------------------------
Match Literal Strings

let waldoIsHiding = "Somewhere Waldo is hiding in this text.";
//Permite encontrar a Waldo..
let waldoRegex = /Waldo/; // Change this line 
let result = waldoRegex.test(waldoIsHiding);


console.log(result);


----------------------------------------------------------------------------------
Match-a-literal-string-with-different-possibilities

You can search for multiple patterns using the alternation or OR operator: |.
You can also search for more than just two patterns. You can do this by adding more patterns with more OR operators separating them, like /yes|no|maybe/

let petString = "James has a pet cat.";
let petRegex = /cat|dog|bird|fish/; // Change this line
let result = petRegex.test(petString);



console.log(result);

-----------------------------------------------------------------------------------
Ignore-case-while-matching

let myString = "freeCodeCamp";
let fccRegex = /FreEcoDeCAMp|freecodecamp|FREECODECAMP/i; // Change this line
let result = fccRegex.test(myString);


console.log(result);


------------------------------------------------------------------------------------
Extract-matches
extraer una palabra y conocer la posicion, :3 

let extractStr = "Extract the word 'coding' from this string.";
let codingRegex = /coding/; // Change this line
let result = extractStr.match(codingRegex); // Change this line

console.log(result); 

-------------------------------------------------------------------------------------
Find-more-than-the-first-match

let twinkleStar = "Twinkle, twinkle, little star";
let starRegex = /tWinkle/gi; // Change this line
let result = twinkleStar.match(starRegex); // Change this line

console.log(result);

g = global
i = miniscula o mayuscula
--------------------------------------------------------------------------------------
Match Anything with Wildcard PeriodPassed
Permite encontrar ciertos carateres, 

let exampleStr = "Let's have fun with regular expressions!";
let unRegex = /fun.|run.|sun.|pun.|nun.|bun./; // Change this line
let result = unRegex.test(exampleStr);

console.log(result)// true

---------------------------------------------------------------------------------------
Match Anything with Wildcard Period
(.)

let exampleStr = "Let's have fun with regular expressions!";
let unRegex = /un./; // Change this line
let result = unRegex.test(exampleStr);

---------------------------------------------------------------------------------------
Match Single Character with Multiple Possibilities
match

let quoteSample = "Beware of bugs in the above code; I have only proved it correct, not tried it.";
let vowelRegex = /[aeiou]/gi; // Change this line
let result = quoteSample.match(vowelRegex); // Change this line

---------------------------------------------------------------------------------------
Match Letters of the Alphabet
/[a-z]/gi

let quoteSample = "The quick brown fox jumps over the lazy dog.";
let alphabetRegex = /[a-z]/gi; // Change this line
let result = quoteSample.match(alphabetRegex); // Change this line

---------------------------------------------------------------------------------------
Match Numbers and Letters of the Alphabet

ejercicio: Create a single regex that matches a range of letters between h and s, and a range of numbers between 2 and 6. Remember to include the appropriate flags in the regex.


let quoteSample = "Blueberry 3.141592653s are delicious.";
let myRegex = /[h-s2-6]/gi; // Change this line
let result = quoteSample.match(myRegex); // Change this line
---------------------------------------------------------------------------------------
Match Single Characters Not Specified

ejercicio: Create a single regex that matches all characters that are not a number or a vowel. Remember to include the appropriate flags in the regex.


let quoteSample = "3 blind mice.";
let myRegex = /[^aeiou0-9]/gi; // Change this line
let result = quoteSample.match(myRegex); // Change this line
-----------------------------------------------------------------------------------------------------------
Match Characters that Occur One or More Times

ejecicio: You want to find matches when the letter s occurs one or more times in Mississippi. Write a regex that uses the + sign.

let difficultSpelling = "Mississippi";
let myRegex = /s+/g; // Change this line Global para encontrar alguna repeticion de la doble ss
let result = difficultSpelling.match(myRegex);
------------------------------------------------------------------------------------------------------------
Match Characters that Occur Zero or More Times

ejercicio: For this challenge, chewieQuote has been initialized as the string Aaaaaaaaaaaaaaaarrrgh! behind the scenes. Create a regex chewieRegex that uses the * character to match an uppercase A character immediately followed by zero or more lowercase a characters in chewieQuote. Your regex does not need flags or character classes, and it should not match any of the other quotes.


// Only change code below this line
let chewieRegex = /Aa*/; // Change this line
// Only change code above this line

let result = chewieQuote.match(chewieRegex);

-------------------------------------------------------------------------------------------------------------
Find Characters with Lazy Matching

You can apply the regex /t[a-z]*i/ to the string "titanic". This regex is basically a pattern that starts with t, ends with i, and has some letters in between.

Regular expressions are by default greedy, so the match would return ["titani"]. It finds the largest sub-string possible to fit the pattern.

However, you can use the ? character to change it to lazy matching. "titanic" matched against the adjusted regex of /t[a-z]*?i/ returns ["ti"].

Note: Parsing HTML with regular expressions should be avoided, but pattern matching an HTML string with regular expressions is completely fine.

Fix the regex /<.*>/ to return the HTML tag <h1> and not the text "<h1>Winter is coming</h1>". Remember the wildcard . in a regular expression matches any character.

let text = "<h1>Winter is coming</h1>";
let myRegex = /<h[0-9]*?>/; // Change this line
let result = text.match(myRegex);

-------------------------------------------------------------------------------------------------------------
Regular Expressions
Find One or More Criminals in a Hunt













































































